// Cross-platform build script for Deno Deploy:
// - Generates assets.gen.ts from public/ for fileless environments (Deno Deploy)
// - No bundling required; deploy server.ts directly

type AssetEntry = { content: string; contentType: string };

function detectContentType(path: string): string {
    const lower = path.toLowerCase();
    if (lower.endsWith(".html") || lower.endsWith(".htm")) return "text/html; charset=utf-8";
    if (lower.endsWith(".js")) return "text/javascript; charset=utf-8";
    if (lower.endsWith(".css")) return "text/css; charset=utf-8";
    if (lower.endsWith(".json")) return "application/json; charset=utf-8";
    if (lower.endsWith(".svg")) return "image/svg+xml";
    return "application/octet-stream";
}

async function* walk(dir: string, prefix = ""): AsyncGenerator<{ rel: string; abs: string }> {
    for await (const entry of Deno.readDir(dir)) {
        const abs = `${dir}/${entry.name}`;
        const rel = prefix ? `${prefix}/${entry.name}` : entry.name;
        if (entry.isDirectory) {
            yield* walk(abs, rel);
        } else if (entry.isFile) {
            yield { rel, abs };
        }
    }
}

async function generateAssets() {
    const outPath = "assets.gen.ts";
    const assets: Record<string, AssetEntry> = {};
    try {
        for await (const { rel, abs } of walk("public")) {
            const content = await Deno.readTextFile(abs);
            assets[rel.replaceAll("\\\\", "/")] = {
                content,
                contentType: detectContentType(rel),
            };
        }
    } catch (e) {
        if (e instanceof Deno.errors.NotFound) {
            console.warn("public/ directory not found; no embedded assets will be generated");
        } else {
            throw e;
        }
    }

    const header = `// AUTO-GENERATED by scripts/build.ts\n// Embedded static assets for Deno Deploy (no filesystem)\n`;
    const body = `export const assets: Record<string, { content: string; contentType: string }> = ${JSON.stringify(assets, null, 2)};\n`;
    await Deno.writeTextFile(outPath, `${header}\n${body}`);
    console.log(`Wrote ${outPath} with ${Object.keys(assets).length} assets.`);
}

async function main() {
    await generateAssets();
    console.log("Build complete. Use 'deno task preview' or deploy with 'deno task deploy'.\n");
}

if (import.meta.main) {
    await main();
}
